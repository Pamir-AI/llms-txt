You are a professional Python development engineer, and I need you to complete the following mcp-server development work.
First, your work goal this time is to complete the 5 major steps of mcp-server creation, running, installation, testing and improvement, and deployment. For each step, I will give you detailed guidance and arrangements. When you actually execute, you also need to first give a specific operation plan and then execute it. After completing each step, you need to mark it as completed on the plan.

# Project Structure
mcp
├─ .mcp-port
├─ fastmcp-llm.txt
└─ arxiv-mcp
   ├─ .python-version
   ├─ main.py
   ├─ pyproject.toml
   ├─ README.md
   ├─ uv.lock
   ├─ tests/
   │  ├─ test_arxiv_mcp.py
   │  └─ __init__.py
   └─ src
      └─ arxiv_mcp
         ├─ arxiv_client.py
         ├─ models.py
         ├─ server.py
         ├─ utils.py
         └─ __init__.py

Note:
- mcp is the main working directory
- .mcp-port records the port numbers used by all mcp-server projects in the main working directory when they start
- The URL address in the fastmcp-llm.txt file corresponds to the web page content with detailed information and usage of the FastMCP python package
- arxiv-mcp is an existing mcp-server project provided for your reference
- New projects should adopt the same directory structure as arxiv-mcp, including the src/{project_name}/ directory and tests/ directory

# MCP Development Best Practices

## Complete Solution Approach
When creating an MCP server, aim for a **complete, self-contained solution** that includes:
- Automated environment setup using uv
- Proper project structure following established patterns
- Comprehensive error handling and graceful degradation
- End-to-end testing workflow with actual tool calls
- Complete documentation (README) with setup and usage instructions

## Learning from Existing Projects
Before starting development:
1. **Reference existing MCP projects** in the workspace to understand structure and patterns
2. Study the arxiv-mcp implementation for architectural guidance
3. Review similar hardware/domain-specific MCPs for relevant patterns
4. Check `/home/distiller/distiller-cm5-mcp-hub/projects` for additional examples

## Project Location Standards
- **Standard project location**: `/home/distiller/distiller-cm5-mcp-hub/projects/{project-name}`
- This enables integration with the MCP Hub management system
- Follows the established distiller ecosystem structure
- Allows for automatic discovery and configuration

## Hardware Interface Selection
For hardware-specific MCPs, implement intelligent interface selection:
- **Auto-detect optimal hardware library** based on available interfaces and requirements
- **Fallback hierarchy**: lgpio → pigpio → RPi.GPIO (based on distiller-hardware.txt specs)
- **Document hardware requirements** including GPIO pins, voltage levels, and config.txt needs
- **Validate hardware availability** before attempting operations

## Testing Workflow Requirements
Every MCP server must include:
1. **Functional testing**: Call each tool with appropriate parameters after setup
2. **Integration testing**: Verify MCP client can discover and invoke tools
3. **Hardware testing** (if applicable): Test actual hardware operations
4. **Error scenario testing**: Verify graceful degradation when hardware/dependencies unavailable
5. **Documentation testing**: Ensure README instructions work end-to-end

Example testing sequence:
```bash
# 1. Setup and start server
uv sync
uv run main.py --port 3000 &

# 2. Test tool discovery and calls
# (Include specific test calls for each tool)

# 3. Verify expected behaviors and responses
```

# Architecture Principles
Follow these key principles when creating MCP servers:

## Separation of Concerns
- **server.py**: Contains only MCP server logic, tool definitions, and FastMCP setup
- **{domain}.py**: Contains all business/domain-specific logic (e.g., api_client.py, hardware_controller.py)
- **models.py**: Data models and type definitions
- **utils.py**: Utility functions and helpers

## Error Handling Strategy
- Always implement graceful degradation
- Provide meaningful error messages
- Include fallback behaviors when possible
- Clean up resources properly

## Tool Design Best Practices
- Use clear, descriptive docstrings for every tool
- Implement proper parameter typing with defaults where appropriate
- Return appropriate types (str, Image, structured data)
- Handle edge cases gracefully

# First Major Step: mcp-server Creation

## Pre-Development Phase
1. Go to the webpage https://modelcontextprotocol.io/introduction to read and understand the introduction section of mcp in detail, ensuring you understand the basic concepts and working principles of mcp.
2. Read every line of content in the fastmcp-llm.txt text file in detail to understand the specific usage of the FastMCP python package

## Project Initialization
3. Use the uv tool to manage the entire mcp-server project:
   ```bash
   # Initialize project in current working directory (mcp)
   uv init {mcp-server-name}
   cd {mcp-server-name}
   
   # Create proper directory structure
   mkdir -p src/{project_name}
   mkdir -p tests
   ```

## Project Templates
4. Use these templates as starting points:

### pyproject.toml Template
```toml
[project]
name = "{mcp-server-name}"
version = "1.0.0"
description = "{Brief description of MCP server functionality}"
readme = "README.md"
requires-python = ">=3.11"
dependencies = [
    "mcp[cli]>=1.1.2",
    # Add your specific dependencies here
]

[[project.authors]]
name = "Developer"
email = "dev@example.com"

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "isort>=5.12.0",
]

[project.scripts]
{mcp-server-name} = "main:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.black]
line-length = 88
target-version = ['py311']

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
```

### main.py Template (Entry Point)
```python
#!/usr/bin/env python3
"""
{MCP Server Name}
Entry point for the MCP server.
"""

import argparse
import sys
from src.{project_name}.server import main as server_main

def main():
    """Main entry point with argument parsing."""
    parser = argparse.ArgumentParser(description='{MCP Server Name}')
    parser.add_argument('--transport', 
                       choices=['stdio', 'sse', 'streamable-http'], 
                       default='streamable-http',
                       help='Transport protocol (default: streamable-http for internet deployment)')
    parser.add_argument('--host', default='0.0.0.0',
                       help='Host address (default: 0.0.0.0 for external access)')
    parser.add_argument('--port', type=int, default=None,
                       help='Port number (auto-assigned if not specified)')
    
    args = parser.parse_args()
    
    try:
        server_main(
            transport=args.transport,
            host=args.host,
            port=args.port
        )
    except KeyboardInterrupt:
        print("\nServer stopped by user")
        sys.exit(0)
    except Exception as e:
        print(f"Server error: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
```

### src/{project_name}/server.py Template
```python
"""
{MCP Server Name} - MCP Server Implementation
Contains MCP server logic and tool definitions.
"""

import sys
import random
from mcp.server.fastmcp import FastMCP
from pathlib import Path

# Import domain logic (graceful import handling)
try:
    from .{domain_module} import {DomainClass}
    domain = {DomainClass}()
except ImportError as e:
    print(f"Warning: Failed to import domain logic: {e}")
    domain = None

# Port management
def get_available_port() -> int:
    """Get an available port, avoiding conflicts with .mcp-port file."""
    mcp_port_file = Path("../../.mcp-port")
    used_ports = set()
    
    if mcp_port_file.exists():
        with open(mcp_port_file, 'r') as f:
            for line in f:
                if ':' in line:
                    _, port = line.strip().split(':')
                    used_ports.add(int(port))
    
    # Find available port in range 8000-9000
    for _ in range(100):  # Try up to 100 times
        port = random.randint(8000, 9000)
        if port not in used_ports:
            return port
    
    raise RuntimeError("No available ports in range 8000-9000")

def register_port(service_name: str, port: int):
    """Register port in .mcp-port file."""
    mcp_port_file = Path("../../.mcp-port")
    with open(mcp_port_file, 'a') as f:
        f.write(f"{service_name}:{port}\n")

# Create MCP server
mcp = FastMCP("{MCP Server Name}")

@mcp.tool()
async def get_status() -> str:
    """
    Get service status and health information.
    
    Returns:
        Service status information including health checks
    """
    try:
        if domain is None:
            return "Status: Service not available - domain logic not loaded"
        
        status = domain.get_status()
        return f"Status: {status}"
    except Exception as e:
        return f"Status: Error - {str(e)}"

# Add your specific tools here following the pattern:
@mcp.tool()
async def example_tool(param: str) -> str:
    """
    Example tool implementation.
    
    Args:
        param: Description of parameter
        
    Returns:
        Description of return value
    """
    try:
        if domain is None:
            return "Service not available: domain logic not loaded"
        
        result = domain.example_method(param)
        return f"Result: {result}"
    except Exception as e:
        raise ValueError(f"Tool failed: {str(e)}")

def main(transport: str = 'streamable-http', host: str = '0.0.0.0', port: int = None):
    """Main server function with transport configuration."""
    
    # Handle port assignment for streamable-http
    if transport == 'streamable-http' and port is None:
        port = get_available_port()
        register_port("{mcp-server-name}", port)
        print(f"Assigned port: {port}")
    
    # Set server configuration
    if transport in ['sse', 'streamable-http']:
        mcp.settings.host = host
        mcp.settings.port = port
    
    # Start server
    if transport == 'stdio':
        mcp.run()
    elif transport == 'sse':
        mcp.run(transport="sse")
    elif transport == 'streamable-http':
        mcp.run(transport="streamable-http")
    else:
        raise ValueError(f"Unsupported transport: {transport}")

if __name__ == "__main__":
    main()
```

### src/{project_name}/{domain}.py Template
```python
"""
Domain-specific logic for {MCP Server Name}.
Keep all business logic separate from MCP server logic.
"""

import logging

logger = logging.getLogger(__name__)

class {DomainClass}:
    """Domain logic for {service description}."""
    
    def __init__(self):
        """Initialize the domain service."""
        self.initialized = False
        try:
            self._initialize()
            self.initialized = True
            logger.info("Domain service initialized successfully")
        except Exception as e:
            logger.error(f"Failed to initialize domain service: {e}")
            # Don't raise - allow graceful degradation
    
    def _initialize(self):
        """Initialize service connections/resources."""
        # Add your initialization logic here
        pass
    
    def example_method(self, param: str) -> str:
        """Example domain method."""
        if not self.initialized:
            raise RuntimeError("Service not initialized")
        
        # Your domain logic here
        return f"Processed: {param}"
    
    def get_status(self) -> str:
        """Get current service status."""
        if not self.initialized:
            return "Not initialized"
        
        # Add your status checking logic here
        return "Service running normally"
    
    def cleanup(self):
        """Clean up resources."""
        try:
            # Add cleanup logic here
            logger.info("Domain service cleaned up")
        except Exception as e:
            logger.error(f"Cleanup error: {e}")
```

## Development Requirements
5. Follow these specific requirements:
   - Use Python code for creation
   - Use the FastMCP python package for MCP server development
   - **Primary transport**: streamable-http (for internet deployment)
   - **Flexible configuration**: Support multiple transports via arguments
   - Use the uv tool for project management (already installed)
   - Reference the arxiv-mcp project for structure consistency

6. File organization requirements:
   - **server.py**: MCP server setup, tool definitions, port management
   - **{domain}.py**: All business/domain-specific logic
   - **models.py**: Data models (if needed)
   - **utils.py**: Utility functions (if needed)
   - **main.py**: Entry point with argument parsing
   - Keep domain logic separate from MCP logic for maintainability

7. Port management (for streamable-http):
   - Read .mcp-port file to avoid port conflicts
   - Generate random port in range 8000-9000
   - Register new port in .mcp-port file with format: 'service_name:port_number'
   - Default host: 0.0.0.0 (for external network access)

8. Error handling requirements:
   - Implement graceful degradation when dependencies fail
   - Provide meaningful error messages to users
   - Always clean up resources in finally blocks
   - Return useful information even when hardware/services are unavailable

# Second Major Step: mcp-server Running
- cd into the root directory of this mcp-server project
- Execute `uv sync` to install dependencies
- Execute `uv run main.py` to start the service (defaults to streamable-http)
- Alternative: `uv run main.py --transport stdio` for local testing

# Third Major Step: Install mcp-server
- The mcp tools configuration file path: `/home/{USER}/.cursor/mcp.json`
- Modify the `~/.cursor/mcp.json` file:
  - Assuming the server started on port 8888, add under mcpServers property:
  ```json
  "{new_mcp_name}": {
    "type": "streamable-http",
    "url": "http://192.168.31.116:8888/mcp/"
  }
  ```
  - **Critical**: URL must end with `/mcp/`
- **Important constraints**:
  - Never modify existing MCP configuration information
  - Always ensure the modified mcp.json file remains valid JSON
  - Test MCP server by installing and calling tools directly (not custom test scripts)

# Fourth Major Step: Test and Improve mcp-server
- After installation, you should see all tools in your MCP tool library
- If tools are not visible, check:
  - mcp.json file format correctness
  - Port number accuracy
  - Service running status
- Testing procedure:
  1. Call tool list function to display all available tools
  2. Test each tool individually with appropriate parameters
  3. Verify return results are normal and useful
  4. If any tool fails, stop server, fix code, restart, and retest
- Provide detailed test report including:
  - Total number of tools
  - Parameters used for each tool test
  - Return results obtained
  - Assessment of whether results are normal

# Fifth Major Step: Deployment
- This step is temporarily not handled, ignore it for now, will be supplemented later

# Key Improvements from Modern MCP Practices
1. **Architecture**: Separation of concerns between MCP layer and domain logic
2. **Error Handling**: Graceful degradation with meaningful error messages
3. **Flexibility**: Multi-transport support while defaulting to streamable-http
4. **Project Structure**: Professional templates with proper UV configuration
5. **Resource Management**: Proper cleanup and resource handling
6. **Developer Experience**: Clear documentation and type hints

# Now, wait for me to give you detailed names and requirements for the mcp-server that needs to perform the above operations 