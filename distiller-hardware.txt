# Hardware Environment for LLM Assistants

The MCP client and server will be running on hardware based on the Raspberry Pi Compute Module 5 (CM5). Understanding the available hardware interfaces is crucial for developing effective MCP server implementations.

## Hardware Overview

The system includes:
- Raspberry Pi Compute Module 5 as the main processing unit
- Audio codec (TLV320AIC3204IRHBR) for audio processing
- RP2040 microcontroller connected via UART2 interface
- Camera and display MIPI connectors
- SPI-based E-Ink Display with custom BSP Linux driver

## GPIO and Hardware Interfaces

When implementing an MCP server that controls hardware:

1. **GPIO Access**: Use the `lgpio` Python library for GPIO operations. This should be the only GPIO library utilized in MCP server implementations for:
   - Digital input/output (HIGH/LOW states)
   - PWM control
   - GPIO event detection

2. **Available Interfaces**:
   - GPIO pins from the CM5 (up to 28 pins, supporting either 1.8V or 3.3V signaling)
   - UART2 for communication with the RP2040 microcontroller (via GPIO4 & GPIO5)
   - SPI interface for the E-Ink display (accessed via custom Linux driver)
   - I²C interfaces for various peripherals
   - MIPI interfaces for camera and display connections
   - I2S interfaces for the audio codec (TLV320AIC3204IRHBR)

3. **Hardware Considerations**:
   - GPIO voltage levels must be respected (either 1.8V or 3.3V depending on GPIO_VREF setting)
   - Total GPIO load should be kept below 50mA
   - The `lgpio` library handles the hardware-specific details of the CM5's GPIO system

## Configuration of Alternative Functions with config.txt

Many GPIO alternative functions require explicit configuration in the Raspberry Pi's `/boot/firmware/config.txt` file before they can be used. This system configuration file controls low-level hardware settings and must be edited to enable certain hardware interfaces or change pin functions.

**Important:** Before attempting to use alternative GPIO functions, MCP servers should:

1. Check if the required function is already enabled in config.txt
2. If not enabled, inform the user about the necessary configuration changes
3. Never attempt to modify config.txt directly from the MCP server (this requires root permissions and a reboot)

Common config.txt entries that affect GPIO functionality include:

```
# Enable I2C interfaces
dtparam=i2c_arm=on
dtparam=i2c1=on

# Enable SPI
dtparam=spi=on

# Enable specific UART interfaces (UART0 is enabled by default)
dtoverlay=uart2
dtoverlay=uart3
dtoverlay=uart4
dtoverlay=uart5

# Enable hardware PWM
dtoverlay=pwm
dtoverlay=pwm-2chan

# Enable I2S audio
dtoverlay=i2s-mmap

# GPIO pin function configuration
gpio=2-3=a2  # Set GPIO2 and GPIO3 to alt2 function
```

A system reboot is required after any changes to config.txt before the new settings take effect. MCP server implementations should document any config.txt requirements in their documentation.

## GPIO Pin Availability and Alternative Functions

Each GPIO pin on the Raspberry Pi CM5 can be configured for multiple functions (alt0 through alt8). The table below shows the current system functions and alternative functions for each pin, along with their availability for MCP server use.

| GPIO | Current Function | Available | Alt0 | Alt1 | Alt2 | Alt3 | Alt4 | Alt5 | Alt6 | Alt7 | Alt8 |
|------|------------------|-----------|------|------|------|------|------|------|------|------|------|
| 0    | ID_SD (EEPROM) | No | SPI0_SIO[3] | DPI_PCLK | UART1_TX | I2C0_SDA | | SYS_RIO[0] | PROC_RIO[0] | PIO[0] | SPI2_CSn[0] |
| 1    | ID_SC (EEPROM) | No | SPI0_SIO[2] | DPI_DE | UART1_RX | I2C0_SCL | | SYS_RIO[1] | PROC_RIO[1] | PIO[1] | SPI2_SIO[1] |
| 2    | I2C SDA1 (E-Ink touch) | Yes | SPI0_CSn[3] | DPI_VSYNC | UART1_CTS | I2C1_SDA | UART0_IR_RX | SYS_RIO[2] | PROC_RIO[2] | PIO[2] | SPI2_SIO[0] |
| 3    | I2C SCL1 (E-Ink touch) | Yes | SPI0_CSn[2] | DPI_HSYNC | UART1_RTS | I2C1_SCL | UART0_IR_TX | SYS_RIO[3] | PROC_RIO[3] | PIO[3] | SPI2_SCLK |
| 4    | UART_TXD2 (microcontroller) | No | GPCLK[0] | DPI_D[0] | UART2_TX | I2C2_SDA | UART0_RI | SYS_RIO[4] | PROC_RIO[4] | PIO[4] | SPI3_CSn[0] |
| 5    | UART_RXD2 (microcontroller) | No | GPCLK[1] | DPI_D[1] | UART2_RX | I2C2_SCL | UART0_DTR | SYS_RIO[5] | PROC_RIO[5] | PIO[5] | SPI3_SIO[1] |
| 6    | I2S Master Clock (Codec) | No | GPCLK[2] | DPI_D[2] | UART2_CTS | I2C3_SDA | UART0_DCD | SYS_RIO[6] | PROC_RIO[6] | PIO[6] | SPI3_SIO[0] |
| 7    | E-Ink Data Command Pin | No | SPI0_CSn[1] | DPI_D[3] | UART2_RTS | I2C3_SCL | UART0_DSR | SYS_RIO[7] | PROC_RIO[7] | PIO[7] | SPI3_SCLK |
| 8    | E-Ink SPI Chip Select | No | SPI0_CSn[0] | DPI_D[4] | UART3_TX | I2C0_SDA | | SYS_RIO[8] | PROC_RIO[8] | PIO[8] | SPI4_CSn[0] |
| 9    | E-Ink BUSY pin | No | SPI0_SIO[1] | DPI_D[5] | UART3_RX | I2C0_SCL | | SYS_RIO[9] | PROC_RIO[9] | PIO[9] | SPI4_MISO |
| 10   | E-Ink SPI MOSI | No | SPI0_SIO[0] | DPI_D[6] | UART3_CTS | I2C1_SDA | | SYS_RIO[10] | PROC_RIO[10] | PIO[10] | SPI4_MOSI |
| 11   | E-Ink SPI Clock | No | SPI0_SCLK | DPI_D[7] | UART3_RTS | I2C1_SCL | | SYS_RIO[11] | PROC_RIO[11] | PIO[11] | SPI4_SCLK |
| 12   | Not Used | Yes | PWM0[0] | DPI_D[8] | UART4_TX | I2C2_SDA | AUDIO_OUT_L | SYS_RIO[12] | PROC_RIO[12] | PIO[12] | SPI5_CSn[0] |
| 13   | E-Ink RESET | No | PWM0[1] | DPI_D[9] | UART4_RX | I2C2_SCL | AUDIO_OUT_R | SYS_RIO[13] | PROC_RIO[13] | PIO[13] | SPI5_SIO[1] |
| 14   | Not Used | Yes | PWM0[2] | DPI_D[10] | UART4_CTS | I2C3_SDA | UART0_TX | SYS_RIO[14] | PROC_RIO[14] | PIO[14] | SPI5_SIO[0] |
| 15   | Not Used | Yes | PWM0[3] | DPI_D[11] | UART4_RTS | I2C3_SCL | UART0_RX | SYS_RIO[15] | PROC_RIO[15] | PIO[15] | SPI5_SCLK |
| 16   | SAM_BOOT (RP2040 OTA) | No | SPI1_CSn[2] | DPI_D[12] | | | UART0_CTS | SYS_RIO[16] | PROC_RIO[16] | PIO[16] | |
| 17   | E-Ink Touch Interrupt | Yes | SPI1_CSn[1] | DPI_D[13] | | | UART0_RTS | SYS_RIO[17] | PROC_RIO[17] | PIO[17] | |
| 18   | I2S BCLK for Codec | No | SPI1_CSn[0] | DPI_D[14] | I2S0_SCLK | PWM0[2] | I2S1_SCLK | SYS_RIO[18] | PROC_RIO[18] | PIO[18] | GPCLK[1] |
| 19   | I2S LRCLK for Codec | No | SPI1_SIO[1] | DPI_D[15] | I2S0_WS | PWM0[3] | I2S1_WS | SYS_RIO[19] | PROC_RIO[19] | PIO[19] | |
| 20   | I2S_DIN (PCM Codec Data) | No | SPI1_SIO[0] | DPI_D[16] | I2S0_SDI[0] | GPCLK[0] | I2S1_SDI[0] | SYS_RIO[20] | PROC_RIO[20] | PIO[20] | |
| 21   | I2S_DOUT (PCM Codec Data) | No | SPI1_SCLK | DPI_D[17] | I2S0_SDO[0] | GPCLK[1] | I2S1_SDO[0] | SYS_RIO[21] | PROC_RIO[21] | PIO[21] | |
| 22   | SAM Interrupt Pin | Yes | SDIO0_CLK | DPI_D[18] | I2S0_SDI[1] | I2C3_SDA | I2S1_SDI[1] | SYS_RIO[22] | PROC_RIO[22] | PIO[22] | |
| 23   | Not Used | Yes | SDIO0_CMD | DPI_D[19] | I2S0_SDO[1] | I2C3_SCL | I2S1_SDO[1] | SYS_RIO[23] | PROC_RIO[23] | PIO[23] | |
| 24   | Not Used | Yes | SDIO0_DAT[0] | DPI_D[20] | I2S0_SDI[2] | | I2S1_SDI[2] | SYS_RIO[24] | PROC_RIO[24] | PIO[24] | SPI2_CSn[1] |
| 25   | Not Used | Yes | SDIO0_DAT[1] | DPI_D[21] | I2S0_SDO[2] | AUDIO_IN_CLK | I2S1_SDO[2] | SYS_RIO[25] | PROC_RIO[25] | PIO[25] | SPI3_CSn[1] |
| 26   | Codec RESET PIN | No | SDIO0_DAT[2] | DPI_D[22] | I2S0_SDI[3] | AUDIO_IN_DAT0 | I2S1_SDI[3] | SYS_RIO[26] | PROC_RIO[26] | PIO[26] | SPI5_CSn[1] |
| 27   | E-Ink Touch Reset | Yes | SDIO0_DAT[3] | DPI_D[23] | I2S0_SDO[3] | AUDIO_IN_DAT1 | I2S1_SDO[3] | SYS_RIO[27] | PROC_RIO[27] | PIO[27] | SPI1_CSn[1] |

MCP servers should only use GPIO pins marked as "Yes" in the "Available" column. When designing tools that require GPIO access, developers should:

1. Be aware of the alternative functions available for each GPIO pin
2. Check if the desired function requires configuration in config.txt
3. Detect when unavailable pins are requested and suggest alternatives if possible
4. Document any required config.txt modifications in their server documentation

When developing an MCP server to control hardware components, ensure your tools follow these specifications for optimal compatibility and reliability. Server implementations should document which GPIO pins or interfaces they require. 

## Common Hardware Components and Specifications

**Hardware Interface Selection Priority:**
1. **lgpio** (preferred): Native CM5 support, best performance
2. **pigpio** (fallback): Broader compatibility, daemon-based
3. **RPi.GPIO** (legacy): Only if others unavailable

### GPIO Library Compatibility Matrix

| Library | PWM Support | Event Detection | I2C/SPI | CM5 Optimized |
|---------|-------------|----------------|---------|---------------|
| lgpio   | Hardware    | Yes            | Yes     | ✓ Native      |
| pigpio  | Software    | Yes            | Limited | ⚠ Daemon     |
| RPi.GPIO| Software    | Basic          | No      | ✗ Legacy      |

### Recommended GPIO Pin Assignments

**PWM-Capable Pins (Hardware PWM preferred):**
- GPIO12: PWM0[0] 
- GPIO14: PWM0[2]    
- GPIO15: PWM0[3]  

**General Purpose I/O (Available pins):**
- GPIO2, GPIO3: I2C1  
- GPIO17: General purpose 
- GPIO22: General purpose  
- GPIO23-25: General purpose
- GPIO27: General purpose 

### MCP Hardware Interface Pattern

```python
# Recommended hardware interface pattern for MCP servers
def get_gpio_interface():
    """Auto-select optimal GPIO library based on availability."""
    try:
        import lgpio
        return "lgpio"
    except ImportError:
        try:
            import pigpio
            return "pigpio"  
        except ImportError:
            try:
                import RPi.GPIO
                return "RPi.GPIO"
            except ImportError:
                raise RuntimeError("No compatible GPIO library found")
``` 